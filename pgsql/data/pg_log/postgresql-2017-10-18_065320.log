2017-10-18 06:53:20 CDT LOG:  database system was shut down at 2017-10-18 06:50:34 CDT
2017-10-18 06:53:20 CDT FATAL:  the database system is starting up
2017-10-18 06:53:21 CDT FATAL:  the database system is starting up
2017-10-18 06:53:22 CDT FATAL:  the database system is starting up
2017-10-18 06:53:22 CDT LOG:  MultiXact member wraparound protections are now enabled
2017-10-18 06:53:23 CDT FATAL:  the database system is starting up
2017-10-18 06:53:24 CDT LOG:  database system is ready to accept connections
2017-10-18 06:53:24 CDT LOG:  autovacuum launcher started
2017-10-18 08:10:29 CDT ERROR:  could not open file "base/16393/2691": No such file or directory at character 57
2017-10-18 08:10:29 CDT STATEMENT:  
	SELECT
	    db.oid as did, db.datname, db.datallowconn, pg_encoding_to_char(db.encoding) AS serverencoding,
	    has_database_privilege(db.oid, 'CREATE') as cancreate, datlastsysoid
	FROM
	    pg_database db
	WHERE db.datname = current_database()
2017-10-18 08:10:33 CDT ERROR:  could not open file "base/16393/2691": No such file or directory at character 50
2017-10-18 08:10:33 CDT STATEMENT:  SELECT
	    nsp.oid,
	    nsp.nspname as name,
	    has_schema_privilege(nsp.oid, 'CREATE') as can_create,
	    has_schema_privilege(nsp.oid, 'USAGE') as has_usage
	FROM
	    pg_namespace nsp
	WHERE
	            nspname NOT LIKE E'pg\_%' AND
	            NOT (
	(nsp.nspname = 'pg_catalog' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pg_class' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'pgagent' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pga_job' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'information_schema' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'tables' AND
	            relnamespace = nsp.oid LIMIT 1))
	    )
	ORDER BY nspname;
2017-10-18 08:14:10 CDT ERROR:  could not open file "base/16393/2690": No such file or directory
2017-10-18 08:14:10 CDT STATEMENT:  SELECT
	    CASE
	    WHEN (nspname LIKE E'pg\\_temp\\_%') THEN 1
	    WHEN (nspname LIKE E'pg\\_%') THEN 0
	    ELSE 3 END AS nsptyp,
	    nsp.nspname AS name,
	    nsp.oid,
	    array_to_string(nsp.nspacl::text[], ', ') as acl,
	    r.rolname AS namespaceowner, description,
	    has_schema_privilege(nsp.oid, 'CREATE') AS can_create,
	    CASE
	    WHEN nspname LIKE E'pg\\_%' THEN true
	    ELSE false END AS is_sys_object,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'r' AND defaclnamespace = nsp.oid
	    ), ', ')) AS tblacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'S' AND defaclnamespace = nsp.oid
	    ), ', ')) AS seqacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'f' AND defaclnamespace = nsp.oid
	    ), ', ')) AS funcacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'T' AND defaclnamespace = nsp.oid
	    ), ', ')) AS typeacl,
	    (SELECT array_agg(provider || '=' || label) FROM pg_seclabels sl1 WHERE sl1.objoid=nsp.oid) AS seclabels
	FROM
	    pg_namespace nsp
	    LEFT OUTER JOIN pg_description des ON
	        (des.objoid=nsp.oid AND des.classoid='pg_namespace'::regclass)
	    LEFT JOIN pg_roles r ON (r.oid = nsp.nspowner)
	WHERE
	                NOT (
	(nsp.nspname = 'pg_catalog' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pg_class' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'pgagent' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pga_job' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'information_schema' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'tables' AND
	            relnamespace = nsp.oid LIMIT 1))
	    )
	ORDER BY 1, nspname;
2017-10-18 08:28:18 CDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2017-10-18 08:28:18 CDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2017-10-18 08:28:48 CDT ERROR:  could not open file "base/16393/2691": No such file or directory at character 57
2017-10-18 08:28:48 CDT STATEMENT:  
	SELECT
	    db.oid as did, db.datname, db.datallowconn, pg_encoding_to_char(db.encoding) AS serverencoding,
	    has_database_privilege(db.oid, 'CREATE') as cancreate, datlastsysoid
	FROM
	    pg_database db
	WHERE db.datname = current_database()
2017-10-18 08:28:50 CDT ERROR:  could not open file "base/16393/2691": No such file or directory at character 50
2017-10-18 08:28:50 CDT STATEMENT:  SELECT
	    nsp.oid,
	    nsp.nspname as name,
	    has_schema_privilege(nsp.oid, 'CREATE') as can_create,
	    has_schema_privilege(nsp.oid, 'USAGE') as has_usage
	FROM
	    pg_namespace nsp
	WHERE
	            nspname NOT LIKE E'pg\_%' AND
	            NOT (
	(nsp.nspname = 'pg_catalog' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pg_class' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'pgagent' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pga_job' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'information_schema' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'tables' AND
	            relnamespace = nsp.oid LIMIT 1))
	    )
	ORDER BY nspname;
2017-10-18 08:28:51 CDT ERROR:  could not open file "base/16393/2690": No such file or directory
2017-10-18 08:28:51 CDT STATEMENT:  SELECT
	    CASE
	    WHEN (nspname LIKE E'pg\\_temp\\_%') THEN 1
	    WHEN (nspname LIKE E'pg\\_%') THEN 0
	    ELSE 3 END AS nsptyp,
	    nsp.nspname AS name,
	    nsp.oid,
	    array_to_string(nsp.nspacl::text[], ', ') as acl,
	    r.rolname AS namespaceowner, description,
	    has_schema_privilege(nsp.oid, 'CREATE') AS can_create,
	    CASE
	    WHEN nspname LIKE E'pg\\_%' THEN true
	    ELSE false END AS is_sys_object,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'r' AND defaclnamespace = nsp.oid
	    ), ', ')) AS tblacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'S' AND defaclnamespace = nsp.oid
	    ), ', ')) AS seqacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'f' AND defaclnamespace = nsp.oid
	    ), ', ')) AS funcacl,
	        (SELECT array_to_string(ARRAY(
	        SELECT array_to_string(defaclacl::text[], ', ')
	            FROM pg_default_acl
	        WHERE defaclobjtype = 'T' AND defaclnamespace = nsp.oid
	    ), ', ')) AS typeacl,
	    (SELECT array_agg(provider || '=' || label) FROM pg_seclabels sl1 WHERE sl1.objoid=nsp.oid) AS seclabels
	FROM
	    pg_namespace nsp
	    LEFT OUTER JOIN pg_description des ON
	        (des.objoid=nsp.oid AND des.classoid='pg_namespace'::regclass)
	    LEFT JOIN pg_roles r ON (r.oid = nsp.nspowner)
	WHERE
	                NOT (
	(nsp.nspname = 'pg_catalog' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pg_class' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'pgagent' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'pga_job' AND
	            relnamespace = nsp.oid LIMIT 1)) OR
	    (nsp.nspname = 'information_schema' AND EXISTS
	        (SELECT 1 FROM pg_class WHERE relname = 'tables' AND
	            relnamespace = nsp.oid LIMIT 1))
	    )
	ORDER BY 1, nspname;
2017-10-18 08:29:00 CDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2017-10-18 08:29:00 CDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2017-10-18 08:31:04 CDT LOG:  received fast shutdown request
2017-10-18 08:31:04 CDT LOG:  aborting any active transactions
2017-10-18 08:31:04 CDT LOG:  autovacuum launcher shutting down
2017-10-18 08:31:04 CDT LOG:  shutting down
2017-10-18 08:31:05 CDT LOG:  database system is shut down
